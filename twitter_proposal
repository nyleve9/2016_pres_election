Springboard Data Science Intensive
Final capstone project proposal 


Evelyn Cheng
November 7, 2016


Who won Twitter in the 2016 Presidential election?


Problem
In part due to the relatively recent rise of social media, information about peopleâ€™s opinions can be found embedded in growing heaps of unstructured text. Consequently, text mining has begun to surpass traditional polling methods as a faster, less expensive, and less biased method for measuring public sentiment. Twitter, a social networking site on which users may read and send messages of up to 140 characters, possesses a potential treasure trove of data from which public sentiments may be mined. However, the extent to which text data from this particular site can be matched to national polling data remains uncertain. I would like to parse and transform nationwide election-related text obtained from Twitter in 2016 into analyzable data and evaluate the resulting sentiments in order to determine how well Twitter trends reflect the public attitudes revealed in election polls. Does the winner of Twitter win in the polls as well?


Hypothesis: In relation to the 2016 presidential election, public support for candidates determined by mining tweets closely reflects public sentiment determined by traditional polling methods. 


Who cares
An estimated 80% of data in the modern world now appears in unstructured form, especially text. Insights available in these data have the potential to inform businesses, politicians, social scientists, and anyone else who wishes to understand the thoughts of others. Analyzing text data for a topic as pervasive and far-reaching as the person whom Americans most desire to elect as their President is a first step toward mining sentiments for more complex or cryptic topics in the future.


Data sources
Twitter API (Tweepy Python library)
National polls (http://projects.fivethirtyeight.com/2016-election-forecast/national-polls/)
(http://www.realclearpolitics.com/epolls/2016/president/us/general_election_trump_vs_clinton-5491.html)


Proposed steps
Use Tweepy (a Python library) to access tweets through the Twitter API.
Pre-process text (remove numbers, capitalization, common words, punctuation, etc.)
Parse data into functioning units for analysis.
Use machine learning techniques to classify sentiments.
Organize terms by frequency, determine relationships between terms, and create a word cloud. 
Compare results of text mining to results of several national polls at multiple time points and check whether differences are significant.
Deliver code and visualizations in a blog post.


Issues to consider
Can we assume that twitter data is unbiased? 
Are supporters of either candidate disproportionately vocal? 
How does tweepy search choose which data to present, since there are access limits?
